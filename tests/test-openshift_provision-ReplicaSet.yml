---
- name: Set Facts
  hosts: localhost
  connection: local
  vars_files:
  - login-creds.yml
  tasks:
  - set_fact:
      test_oc_cmd: >-
        oc
        {% if openshift_connection_certificate_authority is defined %}
        --certificate-authority={{ openshift_connection_certificate_authority | quote }}
        {% endif %}
        {% if openshift_connection_insecure_skip_tls_verify is defined %}
        --insecure-skip-tls-verify={{ openshift_connection_insecure_skip_tls_verify | quote }}
        {% endif %}
        {% if openshift_connection_server is defined %}
        --server={{ openshift_connection_server | quote }}
        {% endif %}
        {% if openshift_connection_token is defined %}
        --token={{ openshift_connection_token | quote }}
        {% endif %}
      openshift_connection:
        server: "{{ openshift_connection_server }}"
        insecure_skip_tls_verify: "{{ openshift_connection_insecure_skip_tls_verify }}"
        token: "{{ openshift_connection_token }}"
      ignore_differences:
        metadata:
          annotations:
            kubectl.kubernetes.io/last-applied-configuration: ''
          creationTimestamp: null
          generation: 0
        spec:
          template:
            metadata:
              creationTimestamp: null

- name: Test Provision
  hosts: localhost
  connection: local
  vars_files:
  - login-creds.yml
  vars:
    provision_replicaset:
      apiVersion: extensions/v1beta1
      kind: ReplicaSet
      metadata:
        labels:
          app: test-replicaset
        name: test-replicaset
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: test-replicaset
        template:
          metadata:
            labels:
              app: test-replicaset
          spec:
            containers:
            - image: nginx:1.7.9
              imagePullPolicy: Always
              name: nginx
              ports:
              - containerPort: 80
                protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext: {}
            terminationGracePeriodSeconds: 30

  roles:
  - role: openshift-provision

  tasks:
  - name: Provision ReplicaSet
    openshift_provision:
      connection: "{{ openshift_connection }}"
      namespace: provision-test
      resource: "{{ provision_replicaset }}"

  - name: Get ReplicaSet
    command: >-
      {{ test_oc_cmd }} export replicaset
      test-replicaset -n provision-test -o json
    register: get_replicaset
    changed_when: false

  - name: Verify ReplicaSet
    fail:
      msg: |
        ReplicaSet not defined as expected
        >>>
        {{ cmp_replicaset | to_yaml }}
        ===
        {{ got_replicaset | to_yaml }}
        <<<
    vars:
      got_replicaset: "{{ get_replicaset.stdout | from_json | combine(ignore_differences, recursive=True) }}"
      cmp_replicaset: "{{ provision_replicaset | combine(ignore_differences, recursive=True) }}"
    when: >-
      cmp_replicaset.metadata != got_replicaset.metadata or
      cmp_replicaset.spec != got_replicaset.spec

  - name: Check reprovision ReplicaSet
    openshift_provision:
      connection: "{{ openshift_connection }}"
      namespace: provision-test
      resource: "{{ provision_replicaset }}"
    register: reprovision_replicaset

  - fail:
      msg: Reprovision indicated change to ReplicaSet
    when: reprovision_replicaset.changed

- name: Test Update
  hosts: localhost
  connection: local
  vars_files:
  - login-creds.yml
  vars:
    provision_replicaset:
      apiVersion: extensions/v1beta1
      kind: ReplicaSet
      metadata:
        labels:
          app: test-replicaset
        name: test-replicaset
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: test-replicaset
        template:
          metadata:
            labels:
              app: test-replicaset
          spec:
            containers:
            - image: nginx:1.7.9
              imagePullPolicy: IfNotPresent
              name: nginx
              ports:
              - containerPort: 80
                protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext: {}
            terminationGracePeriodSeconds: 30

  roles:
  - role: openshift-provision

  tasks:
  - name: Apply update to ReplicaSet
    openshift_provision:
      connection: "{{ openshift_connection }}"
      namespace: provision-test
      resource: "{{ provision_replicaset }}"

  - name: Get ReplicaSet
    command: >-
      {{ test_oc_cmd }} export replicaset
      test-replicaset -n provision-test -o json
    register: get_replicaset
    changed_when: false

  - name: Verify Update ReplicaSet
    fail:
      msg: |
        ReplicaSet not defined as expected
        >>>
        {{ cmp_replicaset | to_yaml }}
        ===
        {{ got_replicaset | to_yaml }}
        <<<
    vars:
      got_replicaset: "{{ get_replicaset.stdout | from_json | combine(ignore_differences, recursive=True) }}"
      cmp_replicaset: "{{ provision_replicaset | combine(ignore_differences, recursive=True) }}"
    when: >-
      cmp_replicaset.metadata != got_replicaset.metadata or
      cmp_replicaset.spec != got_replicaset.spec

- name: Test Delete
  hosts: localhost
  connection: local
  vars_files:
  - login-creds.yml
  vars:
    provision_replicaset:
      kind: ReplicaSet
      metadata:
        name: test-replicaset
  roles:
  - role: openshift-provision
  tasks:
  - name: Delete ReplicaSet
    openshift_provision:
      action: delete
      namespace: provision-test
      connection: "{{ openshift_connection }}"
      resource: "{{ provision_replicaset }}"

  - name: Verify ReplicaSet Delete
    command: >-
      {{ test_oc_cmd }} export replicaset
      test-replicaset -n provision-test -o json
    register: get_replicaset
    failed_when: get_replicaset.rc == 0
    changed_when: false
