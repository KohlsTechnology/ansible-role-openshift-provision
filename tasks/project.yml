- name: Check if project {{ project.name }} exists
  command: >
    oc get project {{ project.name }} -o json
  changed_when: false
  failed_when: false
  register: get_project

- name: Create project {{ project.name }}
  command: >
    oc adm new-project {{ project.name }}
    --display-name={{ project.display_name | default(project.name) | quote }}
    --description={{ project.description | default('') | quote }}
  when: get_project.rc != 0

- name: Update project metadata for {{ project.name }}
  command: >
    oc patch namespace {{ project.name }}
    -R -p {{ patch | to_json | quote }}
  vars:
    curproj: "{{ (get_project.stdout if get_project.rc == 0 else '{}') | from_json }}"
    patch:
      metadata:
        annotations:
          "openshift.io/display-name": "{{ project.display_name | default(project.name) }}"
          "openshift.io/description": "{{ project.description | default('') }}"
        labels: "{{ project.labels | default({}) }}"
  when: >
    get_project.rc == 0 and (
      curproj | json_query('metadata.annotations."openshift.io/display-name"')
        != project.display_name | default(project.name)
      or
      curproj | json_query('metadata.annotations."openshift.io/description"')
        != project.description | default('')
      or (
        project.labels is defined
        and curproj.metadata.labels != project.labels
      )
    )
    

- include: project-pod-network.yml
  static: no
  when:
  - project.join_pod_network is defined
  - project.join_pod_network != ''

- include: project-limit-range.yml
  with_items: "{{ project.limit_ranges | default([]) }}"
  loop_control:
    loop_var: limit_range

- include: project-quota.yml
  with_items: "{{ project.quotas | default([]) }}"
  loop_control:
    loop_var: quota

- include: persistent-volume-claim.yml
  with_items: "{{ project.persistent_volume_claims | default([]) }}"
  loop_control:
    loop_var: persistent_volume_claim

- include: service-account.yml
  with_items: "{{ project.service_accounts | default([]) }}"
  loop_control:
    loop_var: service_account

- name: Get role bindings for project {{ project.name }}
  command: >
    oc get rolebinding -n {{ project.name }} --template '{{
    '{{ range .items }}{{ .roleRef.name }}{{ ":\n  users:\n" }}{{ range .userNames }}  - "{{ . }}"{{ "\n" }}{{ end }}{{ "  groups:\n" }}{{ range .groupNames }}  - "{{ . }}"{{ "\n" }}{{ end }}{{ end }}'
    }}'
  changed_when: false
  failed_when: false
  register: get_role_bindings

# Handle user_to_role
- include: project-user-role-bindings.yml
  with_items: "{{ project.user_to_role | default([]) }}"
  vars:
    current_role_bindings: "{{ get_role_bindings.stdout | from_yaml }}"
  loop_control:
    loop_var: user_role

# Handle group_to_role
- include: project-group-role-bindings.yml
  with_items: "{{ project.group_to_role | default([]) }}"
  vars:
    current_role_bindings: "{{ get_role_bindings.stdout | from_yaml }}"
  loop_control:
    loop_var: group_role

# Handle users in role_bindings
- include: project-user-role-bindings.yml
  static: false
  with_items: "{{ project.role_bindings | default([]) }}"
  when: >
    user_role.users is defined or
    user_role.user is defined
  vars:
    current_role_bindings: "{{ get_role_bindings.stdout | from_yaml }}"
  loop_control:
    loop_var: user_role

# Handle groups in role_bindings
- include: project-group-role-bindings.yml
  static: false
  with_items: "{{ project.role_bindings | default([]) }}"
  when: >
    group_role.groups is defined or
    group_role.group is defined
  vars:
    current_role_bindings: "{{ get_role_bindings.stdout | from_yaml }}"
  loop_control:
    loop_var: group_role

- include: project-resource.yml
  static: false
  with_items: "{{ project.resources | default([]) }}"
  loop_control:
    loop_var: resource
