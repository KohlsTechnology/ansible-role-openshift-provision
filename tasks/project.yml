- name: Check if project {{ project.name }} exists
  command: >
    oc get project {{ project.name }} -o json
  changed_when: false
  failed_when: false
  register: get_project

- name: Create project {{ project.name }}
  command: >
    oc new-project {{ project.name }}
    {% if project.display_name is defined %}--display-name={{ project.display_name | quote }}{% endif %}
    {% if project.description is defined %}--description={{ project.description | quote }}{% endif %}
    {% if project.node_selector is defined %}--node-selector={{ project.node_selector | quote }}{% endif %}
  when: get_project.rc != 0

- name: Set project display-name for {{ project.name }}
  command: >
    oc patch namespace {{ project.name }}
    -R -p {{ patch | to_json | quote }}
  vars:
    current_display_name: >-
      {{
      (get_project.stdout if get_project.rc == 0 else '{}')
      | from_json
      | json_query('metadata.annotations."openshift.io/display-name"')
      }}
    patch:
      metadata:
        annotations:
          "openshift.io/display-name": "{{ project.display_name | default('') }}"
  when: >
    get_project.rc == 0 and
    project.display_name is defined and (
      current_display_name is not defined or
      current_display_name != project.display_name
    )

- name: Set project description for {{ project.name }}
  command: >
    oc patch namespace {{ project.name }}
    -R -p {{ patch | to_json | quote }}
  vars:
    current_description: >-
      {{
      (get_project.stdout if get_project.rc == 0 else '{}')
      | from_json
      | json_query('metadata.annotations."openshift.io/description"')
      }}
    patch:
      metadata:
        annotations:
          "openshift.io/description": "{{ project.description | default('') }}"
  when: >
    get_project.rc == 0 and
    project.description is defined and (
      current_description is not defined or
      current_description != project.description
    )

- name: Set project node-selector for {{ project.name }}
  command: >
    oc patch namespace {{ project.name }}
    -R -p {{ patch | to_json | quote }}
  vars:
    current_node_selector: >-
      {{
      ( get_project.stdout if get_project.rc == 0 else '{}' )
      | from_json
      | json_query('metadata.annotations."openshift.io/node-selector"')
      }}
    patch:
      metadata:
        annotations:
          "openshift.io/node-selector": "{{ project.node_selector | default('') }}"
  when: >
    get_project.rc == 0 and
    project.node_selector is defined and (
      current_node_selector is not defined or
      current_node_selector != project.node_selector
    )

- name: Set project annotations for {{ project.name }}
  command: >
    oc patch namespace {{ project.name | quote }}
    -R -p {{ patch | to_json | quote }}
  vars:
    current_annotations: >-
      {{
      ( get_project.stdout if get_project.rc == 0 else '{}' )
      | from_json
      | json_query('metadata.annotations')
      }}
    patch:
      metadata:
        annotations: "{{ project.annotations | default({}) }}"
  when: >
    project.annotations is defined and (
      get_project.rc != 0 or
      current_annotations is not defined or
      current_annotations == '' or
      current_annotations != current_annotations | combine(project.annotations, recursive=True)
    )

- name: Set project labels for {{ project.name }}
  command: >
    oc patch namespace {{ project.name | quote }}
    -R -p {{ patch | to_json | quote }}
  vars:
    current_labels: >-
      {{
      ( get_project.stdout if get_project.rc == 0 else '{}' )
      | from_json
      | json_query('metadata.labels')
      }}
    patch:
      metadata:
        labels: "{{ project.labels | default({}) }}"
  when: >
    project.labels is defined and (
      get_project.rc != 0 or
      current_labels is not defined or
      current_labels != project.labels
    )

- include: project-pod-network.yml
  static: no
  when:
  - project.join_pod_network is defined
  - project.join_pod_network != ''

- include: project-limit-range.yml
  with_items: "{{ project.limit_ranges | default([]) }}"
  loop_control:
    loop_var: limit_range

- include: project-quota.yml
  with_items: "{{ project.quotas | default([]) }}"
  loop_control:
    loop_var: quota

- include: persistent-volume-claim.yml
  with_items: "{{ project.persistent_volume_claims | default([]) }}"
  loop_control:
    loop_var: persistent_volume_claim

- include: service-accounts.yml
  when: >-
    project.service_accounts is defined

- include: project-role-bindings.yml
  when: >-
    project.role_bindings is defined or
    project.user_to_role is defined or
    project.group_to_role is defined

- include: project-resource.yml
  static: false
  with_items: "{{ project.resources | default([]) }}"
  loop_control:
    loop_var: resource

- include: process-template.yml
  static: false
  # Allow "process_templates" to also be specified as "templates" for
  # compatibility with ansible-stacks.
  with_items: >
    {{
    project.process_templates
    | default([])
    | union( project.templates | default([]) )
    }}
  loop_control:
    loop_var: template
